version: '3.6'
services:
  traefik:
    image: "traefik:v2.5"
    container_name: "traefik"
    command:
      - "--api.insecure=true"
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      - "--entrypoints.web.address=:1337"
    ports:
      - "1337:1337"
      - "9090:8080"
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock:ro"
  postgres:
    image: postgres
    restart: always
    volumes:
      - ./initdb.d:/docker-entrypoint-initdb.d:ro
    environment:
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-secretpgpassword}
    ports:
      - '5432:5432'
  graphql-engine:
    image: hasura/graphql-engine:v2.8.3
    depends_on:
      - keycloak
      - postgres
    restart: always
    expose:
      - 8080
    environment:
      HASURA_GRAPHQL_DATABASE_URL: postgres://postgres:${POSTGRES_PASSWORD:-secretpgpassword}@postgres:5432/postgres
      HASURA_GRAPHQL_JWT_SECRET: ${HASURA_GRAPHQL_JWT_SECRET}
      HASURA_GRAPHQL_ADMIN_SECRET: ${HASURA_GRAPHQL_ADMIN_SECRET}
      HASURA_GRAPHQL_UNAUTHORIZED_ROLE: public
      HASURA_GRAPHQL_LOG_LEVEL: debug
      HASURA_GRAPHQL_ENABLE_CONSOLE: 'false'
      DAISUKI_DATABASE_URL: postgres://postgres:postgres@host.docker.internal:5444/kpop
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.hasura.rule=Host(`localhost`) && PathPrefix(`/`)"
      - "traefik.http.routers.hasura.entrypoints=web"
  keycloak:
    build:
      dockerfile: keycloak/Dockerfile
    image: local-keycloak-postgres
    command:
      - start
      - --import-realm
    environment:
      KEYCLOAK_ADMIN: admin
      KEYCLOAK_ADMIN_PASSWORD: admin
      KC_HTTP_ENABLED: "true"
      KC_HOSTNAME_STRICT: "false"
      KC_HOSTNAME_STRICT_HTTPS: "false"
      KC_DB: "postgres"
      KC_DB_URL_DATABASE: "postgres"
      KC_DB_URL_HOST: postgres
      KC_DB_USERNAME: postgres
      KC_DB_PASSWORD: ${POSTGRES_PASSWORD:-secretpgpassword}
      KC_PROXY: edge
      KC_DB_SCHEMA: keycloak
      # Uncomment the line below if you want to specify JDBC parameters. The parameter below is just an example, and it shouldn't be used in production without knowledge. It is highly recommended that you read the PostgreSQL JDBC driver documentation in order to use it.
      #JDBC_PARAMS: "ssl=true"
    volumes:
      - ./keycloak/hasura-realm.json:/opt/keycloak/data/import/hasura-realm.json
    ports:
      - 8081:8080
    depends_on:
      - postgres
  storage:
    image: nhost/hasura-storage:0.2.1
    depends_on:
      - postgres
      - graphql-engine
      - minio
    restart: always
    expose:
      - 8000
    healthcheck:
      disable: true
    environment:
      PUBLIC_URL: http://localhost:${PROXY_PORT:-1337}
      HASURA_METADATA: 1
      HASURA_ENDPOINT: http://graphql-engine:8080/v1
      HASURA_GRAPHQL_ADMIN_SECRET: ${HASURA_GRAPHQL_ADMIN_SECRET}
      S3_ACCESS_KEY: ${STORAGE_ACCESS_KEY}
      S3_SECRET_KEY: ${STORAGE_SECRET_KEY}
      S3_ENDPOINT: http://minio:8484
      S3_BUCKET: nhost
      POSTGRES_MIGRATIONS: 1
      POSTGRES_MIGRATIONS_SOURCE: postgres://postgres:${POSTGRES_PASSWORD:-secretpgpassword}@postgres:5432/postgres?sslmode=disable
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.storage.rule=Host(`localhost`) && PathPrefix(`/v1/storage`)"
      - "traefik.http.routers.storage.entrypoints=web"
      # Rewrite the path so it matches with the new storage API path introduced in hasura-storage 0.2
      - "traefik.http.middlewares.strip-suffix.replacepathregex.regex=^/v1/storage/(.*)"
      - "traefik.http.middlewares.strip-suffix.replacepathregex.replacement=/v1/$$1"
      - "traefik.http.routers.storage.middlewares=strip-suffix@docker"
    command: serve
  minio:
    image: minio/minio:RELEASE.2021-09-24T00-24-24Z
    entrypoint: sh
    command: -c 'mkdir -p /data/nhost && /opt/bin/minio server --address :8484 /data'
    environment:
      MINIO_ROOT_USER: ${STORAGE_ACCESS_KEY}
      MINIO_ROOT_PASSWORD: ${STORAGE_SECRET_KEY}
    ports:
      - ${MINIO_PORT:-8484}:8484
    volumes:
      - ./data/minio:/data
  mailhog:
    image: mailhog/mailhog
    environment:
      SMTP_HOST: ${AUTH_SMTP_HOST:-mailhog}
      SMTP_PORT: ${AUTH_SMTP_PORT:-1025}
      SMTP_PASS: ${AUTH_SMTP_PASS:-password}
      SMTP_USER: ${AUTH_SMTP_USER:-user}
      SMTP_SECURE: "${AUTH_SMTP_SECURE:-false}"
      SMTP_SENDER: ${AUTH_SMTP_SENDER:-hbp@hbp.com}
    ports:
      - ${AUTH_SMTP_PORT:-1025}:1025
      - 8025:8025
    volumes:
      - ./data/mailhog:/maildir
